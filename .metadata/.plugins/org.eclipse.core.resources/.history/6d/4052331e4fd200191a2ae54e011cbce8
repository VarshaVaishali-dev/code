package Poi.poi;


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.stream.Stream;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class ReadExcel {

  public static void main( String [] args ) {
	  Writer writer = null;
	  ArrayList al=new ArrayList();
	  try(Workbook wb=WorkbookFactory.create(new File("C:\\Users\\HP\\Desktop\\test.xls")))
	  {
		 // Workbook wb=WorkbookFactory.create(new File("C:\\Users\\HP\\Desktop\\test.xls")); 
		
		  Sheet sheet=wb.getSheetAt(0);
		  int rowstart=sheet.getFirstRowNum();
		  int lastrow=sheet.getLastRowNum();
		  
//		  for(int i=rowstart;i<=lastrow;i++) {
//			  Row row=sheet.getRow(i);
//			  for(int j=row.getFirstCellNum();j<row.getLastCellNum();j++) {
//				  Cell cell=row.getCell(j);
//				  String content=cell.getRichStringCellValue().toString();
//				  
//				  System.out.println(cell.getRichStringCellValue());
//				  
//				  al.add(content);
//				  
//				 
//			  }
//			  try (FileWriter writer1 = new FileWriter("E:\\TestSample1.txt");
//			             BufferedWriter bw = new BufferedWriter(writer1)) {
//				  		for(int k=0; k<al.size(); k++) {
//			            bw.write(al.get(k).toString());
//			            bw.newLine();
//				  		}
//
//			        } catch (IOException e) {
//			            System.err.format("IOException: %s%n", e);
//			        }
		  FileWriter writer1 = new FileWriter("E:\\TestSample1.txt");
		  Iterator<Row> rowIterator = sheet.iterator();
		  Row row = rowIterator.next();
			while (rowIterator.hasNext()) {
				row = rowIterator.next();
				// For each row, iterate through each columns
				Iterator<Cell> cellIterator = row.cellIterator();
				while (cellIterator.hasNext()) {
					Cell cell = cellIterator.next();
					switch (cell.getCellType()) {
		            case STRING: 
		            	//Print Excel STRING data in console
			            System.out.print(cell.getStringCellValue()+"|| "); 
			            writer.write(String.valueOf(cell.getRichStringCellValue()+","));
			            break;
		            case NUMERIC: 
		            	//Print Excel data in console
		            	if (DateUtil.isCellDateFormatted(cell)) {
		            		//Print Excel DATE data in dateFormat to console
				            System.out.print(cell.getDateCellValue() + "|| "); 
				            writer.write(String.valueOf(cell.getDateCellValue()+","));
	                    } else {
	                    	//Print Excel NUMERIC data to console
				            System.out.print(cell.getNumericCellValue() + "|| ");
				            writer.write(String.valueOf(cell.getNumericCellValue()+","));
	                    }
		            	break;
		            case BOOLEAN: 
		            	//Print Excel BOOLEAN data to console
			            System.out.print(cell.getBooleanCellValue() + "|| ");
			            writer.write(String.valueOf(cell.getBooleanCellValue()+","));
			            break;
			        case FORMULA: 
			        	//Print Excel BOOLEAN data to console
			        	switch(cell.getCachedFormulaResultType()) {
			            case NUMERIC:
			            	System.out.println("Last evaluated as: " + cell.getNumericCellValue() + "|| ");
			            	writer.write(String.valueOf(cell.getNumericCellValue()+","));
			                break;
			            case STRING:
			                System.out.println("Last evaluated as \"" + cell.getStringCellValue() + "|| ");
			                writer.write(String.valueOf(cell.getStringCellValue()+","));
			                
			                break;
			            case BOOLEAN:
			                System.out.println("Last evaluated as \"" + cell.getBooleanCellValue() + "|| ");
			                writer.write(String.valueOf(cell.getBooleanCellValue()+","));
			                break;
			            case ERROR:
			            	System.out.println("Last evaluated as \"" + cell.getErrorCellValue() + "|| ");
			            	writer.write(String.valueOf(cell.getErrorCellValue()+","));
			            default: System.out.println("FORMULA CELL NOT EVELUATED YET|| ");
			        	}
			        case BLANK: 
		            	//Print Excel BOOLEAN data to console
			            System.out.print("|| ");
			            writer.write(String.valueOf("|| "));
			            break;
			        case _NONE: 
		            	//Print Excel BOOLEAN data to console
			            System.out.print("|| ");
			            break;
			        }
				}
			  System.out.println("-------------------------");
			 
			  
		  }
				  
	  }
	  catch(Exception e){
		  e.printStackTrace();
	  }
	   
	}

	 
   
}